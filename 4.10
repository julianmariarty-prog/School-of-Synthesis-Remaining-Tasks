module formula_2_pipe
(
    input         clk,
    input         rst,

    input         arg_vld,
    input  [31:0] a,
    input  [31:0] b,
    input  [31:0] c,

    output        res_vld,
    output [31:0] res
);

    localparam ISQRT_STAGES = 4; 
    localparam TOTAL_STAGES = ISQRT_STAGES + 2; 
    
    logic [TOTAL_STAGES-1:0] valid_pipe;
    
    logic [31:0] a_reg, b_reg, c_reg;
    
    logic [15:0] isqrt_a_out, isqrt_b_out, isqrt_c_out;
    logic isqrt_a_vld, isqrt_b_vld, isqrt_c_vld;
    
    logic [31:0] sum_ab, sum_abc;
    
    always_ff @(posedge clk or posedge rst) begin
        if (rst) begin
            a_reg <= '0;
            b_reg <= '0;
            c_reg <= '0;
        end else if (arg_vld) begin
            a_reg <= a;
            b_reg <= b;
            c_reg <= c;
        end
    end
    
    always_ff @(posedge clk or posedge rst) begin
        if (rst) begin
            valid_pipe <= '0;
        end else begin
            valid_pipe[0] <= arg_vld;
            for (int i = 1; i < TOTAL_STAGES; i++) begin
                valid_pipe[i] <= valid_pipe[i-1];
            end
        end
    end
    
    isqrt #(.n_pipe_stages(ISQRT_STAGES)) i_isqrt_a (
        .clk   (clk),
        .rst   (rst),
        .x_vld (valid_pipe[0]),  
        .x     (a_reg),
        .y_vld (isqrt_a_vld),
        .y     (isqrt_a_out)
    );
    
    isqrt #(.n_pipe_stages(ISQRT_STAGES)) i_isqrt_b (
        .clk   (clk),
        .rst   (rst),
        .x_vld (valid_pipe[0]),  
        .x     (b_reg),
        .y_vld (isqrt_b_vld),
        .y     (isqrt_b_out)
    );
    
    isqrt #(.n_pipe_stages(ISQRT_STAGES)) i_isqrt_c (
        .clk   (clk),
        .rst   (rst),
        .x_vld (valid_pipe[0]),  
        .x     (c_reg),
        .y_vld (isqrt_c_vld),
        .y     (isqrt_c_out)
    );
    
    always_ff @(posedge clk or posedge rst) begin
        if (rst) begin
            sum_ab <= '0;
        end else if (valid_pipe[ISQRT_STAGES-1]) begin  
            sum_ab <= {16'b0, isqrt_a_out} + {16'b0, isqrt_b_out};
        end
    end
    
    always_ff @(posedge clk or posedge rst) begin
        if (rst) begin
            sum_abc <= '0;
        end else if (valid_pipe[ISQRT_STAGES]) begin  
            sum_abc <= sum_ab + {16'b0, isqrt_c_out};
        end
    end
    

    assign res_vld = valid_pipe[TOTAL_STAGES-1];
    assign res = sum_abc;

endmodule
