module formula_1_pipe_aware_fsm
(
    input               clk,
    input               rst,

    input               arg_vld,
    input        [31:0] a,
    input        [31:0] b,
    input        [31:0] c,

    output logic        res_vld,
    output logic [31:0] res,


    output logic        isqrt_x_vld,
    output logic [31:0] isqrt_x,

    input               isqrt_y_vld,
    input        [15:0] isqrt_y
);

    typedef enum logic [2:0] {
        STATE_IDLE = 3'b000,
        STATE_CALC_A = 3'b001,
        STATE_CALC_B = 3'b010,
        STATE_CALC_C = 3'b011,
        STATE_WAIT_RESULT = 3'b100
    } state_t;

    state_t current_state, next_state;

    logic [31:0] a_reg, b_reg, c_reg;
    logic [31:0] sum_reg;
    logic [1:0] result_counter;

    always_ff @(posedge clk or posedge rst) begin
        if (rst) begin
            current_state <= STATE_IDLE;
        end else begin
            current_state <= next_state;
        end
    end

    always_ff @(posedge clk or posedge rst) begin
        if (rst) begin
            a_reg <= '0;
            b_reg <= '0;
            c_reg <= '0;
            sum_reg <= '0;
            result_counter <= '0;
        end else begin
            if (arg_vld && current_state == STATE_IDLE) begin
                a_reg <= a;
                b_reg <= b;
                c_reg <= c;
            end

            if (isqrt_y_vld) begin
                sum_reg <= sum_reg + isqrt_y;
                result_counter <= result_counter + 1;
            end

            if (current_state == STATE_CALC_A && next_state == STATE_CALC_B) begin
                sum_reg <= '0;
                result_counter <= '0;
            end
        end
    end

    always_comb begin
        next_state = current_state;

        case (current_state)
            STATE_IDLE: begin
                if (arg_vld) begin
                    next_state = STATE_CALC_A;
                end
            end

            STATE_CALC_A: begin
                next_state = STATE_CALC_B;
            end

            STATE_CALC_B: begin
                next_state = STATE_CALC_C;
            end

            STATE_CALC_C: begin
                next_state = STATE_WAIT_RESULT;
            end

            STATE_WAIT_RESULT: begin
                if (result_counter == 2'd3) begin
                    if (arg_vld) begin
                        next_state = STATE_CALC_A;
                    end else begin
                        next_state = STATE_IDLE;
                    end
                end
            end
        endcase
    end

    always_comb begin
        isqrt_x_vld = 1'b0;
        isqrt_x = '0;

        case (current_state)
            STATE_CALC_A: begin
                isqrt_x_vld = 1'b1;
                isqrt_x = a_reg;
            end

            STATE_CALC_B: begin
                isqrt_x_vld = 1'b1;
                isqrt_x = b_reg;
            end

            STATE_CALC_C: begin
                isqrt_x_vld = 1'b1;
                isqrt_x = c_reg;
            end

            default: begin
                isqrt_x_vld = 1'b0;
                isqrt_x = '0;
            end
        endcase
    end

    always_ff @(posedge clk or posedge rst) begin
        if (rst) begin
            res_vld <= 1'b0;
            res <= '0;
        end else begin
            res_vld <= (result_counter == 2'd3) && isqrt_y_vld;
            if ((result_counter == 2'd3) && isqrt_y_vld) begin
                res <= sum_reg + isqrt_y; // Add the last result
            end
        end
    end

endmodule
// Task:
    //
    // Implement a module formula_1_pipe_aware_fsm
    // with a Finite State Machine (FSM)
    // that drives the inputs and consumes the outputs
    // of a single pipelined module isqrt.
    //
    // The formula_1_pipe_aware_fsm module is supposed to be instantiated
    // inside the module formula_1_pipe_aware_fsm_top,
    // together with a single instance of isqrt.
    //
    // The resulting structure has to compute the formula
    // defined in the file formula_1_fn.svh.
    //
    // The formula_1_pipe_aware_fsm module
    // should NOT create any instances of isqrt module,
    // it should only use the input and output ports connecting
    // to the instance of isqrt at higher level of the instance hierarchy.
    //
    // All the datapath computations except the square root calculation,
    // should be implemented inside formula_1_pipe_aware_fsm module.
    // So this module is not a state machine only, it is a combination
    // of an FSM with a datapath for additions and the intermediate data
    // registers.
    //
    // Note that the module formula_1_pipe_aware_fsm is NOT pipelined itself.
    // It should be able to accept new arguments a, b and c
    // arriving at every N+3 clock cycles.
    //
    // In order to achieve this latency the FSM is supposed to use the fact
    // that isqrt is a pipelined module.
    //
    // For more details, see the discussion of this problem
    // in the article by Yuri Panchul published in
    // FPGA-Systems Magazine :: FSM :: Issue ALFA (state_0)
    // You can download this issue from https://fpga-systems.ru/fsm#state_0
