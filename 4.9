module shift_register_with_valid
# (
    parameter width = 8, depth = 8
)
(
    input                clk,
    input                rst,

    input                in_vld,
    input  [width - 1:0] in_data,

    output               out_vld,
    output [width - 1:0] out_data
);

    logic [width - 1:0] data_reg [0:depth - 1];
    logic [depth - 1:0] valid_reg;

    always_ff @(posedge clk or posedge rst) begin
        if (rst) begin
            for (int i = 0; i < depth; i++) begin
                data_reg[i] <= '0;
            end
            valid_reg <= '0;
        end else begin
            if (in_vld) beginые
                data_reg[0] <= in_data;
                
                for (int i = 1; i < depth; i++) begin
                    data_reg[i] <= data_reg[i - 1];
                end
                
                valid_reg <= {valid_reg[depth - 2:0], 1'b1};
            end
        end
    end

    assign out_data = data_reg[depth - 1];
    assign out_vld  = valid_reg[depth - 1];

endmodule
